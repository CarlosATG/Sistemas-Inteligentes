import random
import math


# Función para calcular la constante mágica para un cuadrado de tamaño n
def constante_magica(n):
    return n * (n ** 2 + 1) // 2


# Función para calcular las sumas de las filas, columnas y diagonales de un cuadrado
def calcular_costos(cuadrado, n):
    suma_filas = [sum(cuadrado[i]) for i in range(n)]
    suma_columnas = [sum([cuadrado[i][j] for i in range(n)]) for j in range(n)]
    suma_diagonal1 = sum([cuadrado[i][i] for i in range(n)])
    suma_diagonal2 = sum([cuadrado[i][n - i - 1] for i in range(n)])
    return suma_filas, suma_columnas, suma_diagonal1, suma_diagonal2


# Función de costo: mide cuán lejos está el cuadrado de ser mágico
def calcular_error(cuadrado, n, constante):
    suma_filas, suma_columnas, suma_diagonal1, suma_diagonal2 = calcular_costos(cuadrado, n)
    error = 0
    for suma in suma_filas + suma_columnas + [suma_diagonal1, suma_diagonal2]:
        error += abs(suma - constante)
    return error


# Función de probabilidad para aceptar una peor solución
def probabilidad(energia_actual, energia_nueva, temperatura):
    if energia_nueva < energia_actual:
        return 1.0
    else:
        return math.exp((energia_actual - energia_nueva) / temperatura)


# Algoritmo de recocido simulado para el problema de los cuadrados mágicos
def recocido_simulado(n, temperatura_inicial, enfriamiento, iteraciones):
    # Crear una solución inicial aleatoria (permuta de números del 1 al n^2)
    solucion_actual = list(range(1, n ** 2 + 1))
    random.shuffle(solucion_actual)
    solucion_actual = [solucion_actual[i * n:(i + 1) * n] for i in range(n)]
    mejor_solucion = [fila[:] for fila in solucion_actual]

    constante = constante_magica(n)
    temperatura = temperatura_inicial

    for iteracion in range(iteraciones):
        # Generar una nueva solución vecina intercambiando dos elementos del cuadrado
        nueva_solucion = [fila[:] for fila in solucion_actual]
        i1, j1, i2, j2 = random.sample(range(n), 2) + random.sample(range(n), 2)
        nueva_solucion[i1][j1], nueva_solucion[i2][j2] = nueva_solucion[i2][j2], nueva_solucion[i1][j1]

        # Calcular el error (energía) de la solución actual y la nueva solución
        energia_actual = calcular_error(solucion_actual, n, constante)
        energia_nueva = calcular_error(nueva_solucion, n, constante)

        # Decidir si aceptamos la nueva solución
        if probabilidad(energia_actual, energia_nueva, temperatura) > random.random():
            solucion_actual = nueva_solucion

        # Actualizar la mejor solución si la nueva solución es mejor
        if energia_nueva < calcular_error(mejor_solucion, n, constante):
            mejor_solucion = nueva_solucion

        # Reducir la temperatura
        temperatura *= enfriamiento

    return mejor_solucion, calcular_error(mejor_solucion, n, constante)


# Parámetros del problema y del recocido simulado
n = 3  # Tamaño del cuadrado mágico (por ejemplo, 3x3)
temperatura_inicial = 1000
enfriamiento = 0.99
iteraciones = 10000

# Ejecutar el recocido simulado para construir el cuadrado mágico
mejor_cuadrado, mejor_error = recocido_simulado(n, temperatura_inicial, enfriamiento, iteraciones)

# Imprimir el mejor cuadrado encontrado
print("Mejor cuadrado mágico encontrado:")
for fila in mejor_cuadrado:
    print(fila)
print(f"Error total: {mejor_error}")
